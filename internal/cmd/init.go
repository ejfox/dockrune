package cmd

import (
	"bufio"
	"crypto/rand"
	"encoding/hex"
	"fmt"
	"os"
	"strings"

	"github.com/spf13/cobra"
)

func InitCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "init",
		Short: "Initialize dockrune configuration",
		Long:  `Create a configuration file and set up the environment for dockrune`,
		RunE: func(cmd *cobra.Command, args []string) error {
			return runInit()
		},
	}
}

func runInit() error {
	reader := bufio.NewReader(os.Stdin)

	fmt.Println("Welcome to dockrune setup!")
	fmt.Println("This will create a .env file with your configuration.")
	fmt.Println()

	// Check if .env already exists
	if _, err := os.Stat(".env"); err == nil {
		fmt.Print(".env file already exists. Overwrite? (y/N): ")
		answer, _ := reader.ReadString('\n')
		if strings.ToLower(strings.TrimSpace(answer)) != "y" {
			fmt.Println("Setup cancelled.")
			return nil
		}
	}

	config := make(map[string]string)

	// GitHub Token
	fmt.Print("Enter your GitHub personal access token (required for private repos): ")
	config["GITHUB_TOKEN"], _ = reader.ReadString('\n')
	config["GITHUB_TOKEN"] = strings.TrimSpace(config["GITHUB_TOKEN"])

	// Webhook Secret
	fmt.Print("Enter GitHub webhook secret (press enter to generate): ")
	secret, _ := reader.ReadString('\n')
	secret = strings.TrimSpace(secret)
	if secret == "" {
		secret = generateSecret(32)
		fmt.Printf("Generated webhook secret: %s\n", secret)
		fmt.Println("⚠️  Save this secret! You'll need it when configuring your GitHub webhook.")
	}
	config["GITHUB_WEBHOOK_SECRET"] = secret

	// Deployment domain
	fmt.Print("Enter your deployment domain (e.g., example.com): ")
	config["DEPLOYMENT_DOMAIN"], _ = reader.ReadString('\n')
	config["DEPLOYMENT_DOMAIN"] = strings.TrimSpace(config["DEPLOYMENT_DOMAIN"])

	// Admin credentials
	fmt.Print("Enter admin username (default: admin): ")
	adminUser, _ := reader.ReadString('\n')
	adminUser = strings.TrimSpace(adminUser)
	if adminUser == "" {
		adminUser = "admin"
	}
	config["ADMIN_USERNAME"] = adminUser

	fmt.Print("Enter admin password: ")
	config["ADMIN_PASSWORD"], _ = reader.ReadString('\n')
	config["ADMIN_PASSWORD"] = strings.TrimSpace(config["ADMIN_PASSWORD"])

	// JWT Secret
	config["JWT_SECRET"] = generateSecret(32)

	// Optional: Discord webhook
	fmt.Print("Enter Discord webhook URL (optional, press enter to skip): ")
	config["DISCORD_WEBHOOK_URL"], _ = reader.ReadString('\n')
	config["DISCORD_WEBHOOK_URL"] = strings.TrimSpace(config["DISCORD_WEBHOOK_URL"])

	// Optional: n8n webhook
	fmt.Print("Enter n8n webhook URL (optional, press enter to skip): ")
	config["N8N_WEBHOOK_URL"], _ = reader.ReadString('\n')
	config["N8N_WEBHOOK_URL"] = strings.TrimSpace(config["N8N_WEBHOOK_URL"])

	// Write .env file
	file, err := os.Create(".env")
	if err != nil {
		return fmt.Errorf("failed to create .env file: %w", err)
	}
	defer file.Close()

	fmt.Fprintln(file, "# dockrune configuration")
	fmt.Fprintln(file, "# Generated by dockrune init")
	fmt.Fprintln(file)

	for key, value := range config {
		if value != "" {
			fmt.Fprintf(file, "%s=%s\n", key, value)
		}
	}

	// Add defaults
	fmt.Fprintln(file, "\n# Server configuration")
	fmt.Fprintln(file, "WEBHOOK_PORT=8000")
	fmt.Fprintln(file, "ADMIN_PORT=8001")
	fmt.Fprintln(file, "\n# Storage")
	fmt.Fprintln(file, "DATABASE_PATH=./data/dockrune.db")
	fmt.Fprintln(file, "REPOS_DIR=./repos")
	fmt.Fprintln(file, "LOGS_DIR=./logs")

	fmt.Println("\n✅ Configuration saved to .env")
	fmt.Println("\nNext steps:")
	fmt.Println("1. Configure your GitHub webhook:")
	fmt.Printf("   - URL: https://%s/webhook/github\n", config["DEPLOYMENT_DOMAIN"])
	fmt.Printf("   - Secret: %s\n", config["GITHUB_WEBHOOK_SECRET"])
	fmt.Println("   - Events: Push, Pull Request")
	fmt.Println("2. Run 'dockrune serve' to start the server")

	return nil
}

func generateSecret(length int) string {
	bytes := make([]byte, length)
	rand.Read(bytes)
	return hex.EncodeToString(bytes)
}
